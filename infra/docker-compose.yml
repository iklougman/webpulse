services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: webchecker-postgres
    environment:
      POSTGRES_DB: webchecker
      POSTGRES_USER: webchecker
      POSTGRES_PASSWORD: webchecker
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webchecker -d webchecker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: webchecker-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: webchecker-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/webchecker
      SPRING_DATASOURCE_USERNAME: webchecker
      SPRING_DATASOURCE_PASSWORD: webchecker
      SUPABASE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scheduler Service
  scheduler:
    build:
      context: ../scheduler
      dockerfile: Dockerfile
    container_name: webchecker-scheduler
    environment:
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped

  # HTTP Worker Service
  worker-http:
    build:
      context: ../worker-http
      dockerfile: Dockerfile
    environment:
      REDIS_URL: redis://redis:6379
      BACKEND_URL: http://backend:8080
      LOG_LEVEL: info
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: webchecker-frontend
    environment:
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL:-https://placeholder.supabase.co}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY:-placeholder-key}
      NEXT_PUBLIC_API_URL: http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: webchecker-network
